diff -ur qpid-proton-0.26.0/c/CMakeLists.txt qpid-proton-patched/c/CMakeLists.txt
--- qpid-proton-0.26.0/c/CMakeLists.txt	2018-10-04 04:09:02.000000000 -0600
+++ qpid-proton-patched/c/CMakeLists.txt	2019-03-25 17:32:41.521213312 -0600
@@ -443,15 +443,15 @@
   ${qpid-proton-include-generated}
 )
 
-add_library (qpid-proton-core SHARED ${qpid-proton-core-src})
-add_dependencies (qpid-proton-core generated_c_files)
-target_link_libraries (qpid-proton-core ${SSL_LIB} ${SASL_LIB} ${TIME_LIB} ${PLATFORM_LIBS})
-set_target_properties (qpid-proton-core
-  PROPERTIES
-  VERSION   "${PN_LIB_CORE_VERSION}"
-  SOVERSION "${PN_LIB_CORE_MAJOR_VERSION}"
-  LINK_FLAGS "${CATCH_UNDEFINED} ${LTO}"
-)
+#add_library (qpid-proton-core SHARED ${qpid-proton-core-src})
+#add_dependencies (qpid-proton-core generated_c_files)
+#target_link_libraries (qpid-proton-core ${SSL_LIB} ${SASL_LIB} ${TIME_LIB} ${PLATFORM_LIBS})
+#set_target_properties (qpid-proton-core
+#  PROPERTIES
+#  VERSION   "${PN_LIB_CORE_VERSION}"
+#  SOVERSION "${PN_LIB_CORE_MAJOR_VERSION}"
+#  LINK_FLAGS "${CATCH_UNDEFINED} ${LTO}"
+#)
 
 if (BUILD_STATIC_LIBS)
   add_library (qpid-proton-core-static STATIC ${qpid-proton-core-src})
@@ -472,14 +472,14 @@
   ${qpid-proton-include-extra}
 )
 
-add_library (qpid-proton SHARED ${qpid-proton-src})
-target_link_libraries (qpid-proton LINK_PRIVATE ${SSL_LIB} ${SASL_LIB} ${TIME_LIB} ${PLATFORM_LIBS} ${PROACTOR_LIBS})
-set_target_properties (qpid-proton
-  PROPERTIES
-  VERSION   "${PN_LIB_LEGACY_VERSION}"
-  SOVERSION "${PN_LIB_LEGACY_MAJOR_VERSION}"
-  LINK_FLAGS "${CATCH_UNDEFINED} ${LTO}"
-)
+#add_library (qpid-proton SHARED ${qpid-proton-src})
+#target_link_libraries (qpid-proton LINK_PRIVATE ${SSL_LIB} ${SASL_LIB} ${TIME_LIB} ${PLATFORM_LIBS} ${PROACTOR_LIBS})
+#set_target_properties (qpid-proton
+#  PROPERTIES
+#  VERSION   "${PN_LIB_LEGACY_VERSION}"
+#  SOVERSION "${PN_LIB_LEGACY_MAJOR_VERSION}"
+#  LINK_FLAGS "${CATCH_UNDEFINED} ${LTO}"
+#)
 
 if (BUILD_STATIC_LIBS)
   add_library(qpid-proton-static STATIC ${qpid-proton-src})
@@ -500,15 +500,15 @@
 
 if (qpid-proton-proactor)
   set(HAS_PROACTOR True)
-  add_library (qpid-proton-proactor SHARED ${qpid-proton-proactor})
-  target_link_libraries (qpid-proton-proactor  LINK_PUBLIC qpid-proton-core)
-  target_link_libraries (qpid-proton-proactor  LINK_PRIVATE ${PLATFORM_LIBS} ${PROACTOR_LIBS})
-  set_target_properties (qpid-proton-proactor
-    PROPERTIES
-    VERSION   "${PN_LIB_PROACTOR_VERSION}"
-    SOVERSION "${PN_LIB_PROACTOR_MAJOR_VERSION}"
-    LINK_FLAGS "${CATCH_UNDEFINED} ${LTO}"
-  )
+  #add_library (qpid-proton-proactor SHARED ${qpid-proton-proactor})
+  #target_link_libraries (qpid-proton-proactor  LINK_PUBLIC qpid-proton-core)
+  #target_link_libraries (qpid-proton-proactor  LINK_PRIVATE ${PLATFORM_LIBS} ${PROACTOR_LIBS})
+  #set_target_properties (qpid-proton-proactor
+  #  PROPERTIES
+  #  VERSION   "${PN_LIB_PROACTOR_VERSION}"
+  #  SOVERSION "${PN_LIB_PROACTOR_MAJOR_VERSION}"
+  #  LINK_FLAGS "${CATCH_UNDEFINED} ${LTO}"
+  #)
   if (BUILD_STATIC_LIBS)
     add_library (qpid-proton-proactor-static STATIC ${qpid-proton-proactor})
   endif(BUILD_STATIC_LIBS)
@@ -518,7 +518,7 @@
 if (BUILD_STATIC_LIBS)
   set(STATIC_LIBS qpid-proton-static qpid-proton-core-static)
 endif()
-install(TARGETS qpid-proton qpid-proton-core ${STATIC_LIBS}
+install(TARGETS ${STATIC_LIBS}
   EXPORT  proton
   RUNTIME DESTINATION bin
   ARCHIVE DESTINATION ${LIB_INSTALL_DIR}
@@ -538,11 +538,11 @@
   if (BUILD_STATIC_LIBS)
     set(STATIC_LIBS qpid-proton-proactor-static)
   endif()
-  install(TARGETS qpid-proton-proactor ${STATIC_LIBS}
-    EXPORT  proton
-    RUNTIME DESTINATION bin
-    ARCHIVE DESTINATION ${LIB_INSTALL_DIR}
-    LIBRARY DESTINATION ${LIB_INSTALL_DIR})
+  #install(TARGETS qpid-proton-proactor ${STATIC_LIBS}
+  #  EXPORT  proton
+  #  RUNTIME DESTINATION bin
+  #  ARCHIVE DESTINATION ${LIB_INSTALL_DIR}
+  #  LIBRARY DESTINATION ${LIB_INSTALL_DIR})
 
   # Install windows pdb files
   if (MSVC)
@@ -594,10 +594,10 @@
   ${CMAKE_CURRENT_BINARY_DIR}/ProtonConfigVersion.cmake
   DESTINATION ${LIB_INSTALL_DIR}/cmake/Proton)
 
-add_subdirectory(docs)
-add_subdirectory(examples)
-add_subdirectory(tests)
-add_subdirectory(tools)
+#add_subdirectory(docs)
+#add_subdirectory(examples)
+#add_subdirectory(tests)
+#add_subdirectory(tools)
 
 install (DIRECTORY examples/
          DESTINATION "${PROTON_SHARE}/examples/c"
diff -ur qpid-proton-0.26.0/CMakeLists.txt qpid-proton-patched/CMakeLists.txt
--- qpid-proton-0.26.0/CMakeLists.txt	2018-10-04 04:09:02.000000000 -0600
+++ qpid-proton-patched/CMakeLists.txt	2019-03-25 17:32:41.521213312 -0600
@@ -24,22 +24,22 @@
 set (CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/tools/cmake/Modules")
 set (CMAKE_THREAD_PREFER_PTHREAD TRUE)
 
-include (CTest)
+#include (CTest)
 include (CheckLanguage)
 include (CheckLibraryExists)
 include (CheckSymbolExists)
 include (CheckPythonModule)
 
-find_package (OpenSSL)
+#find_package (OpenSSL)
 find_package (Threads)
 find_package (PythonInterp REQUIRED)
-find_package (SWIG)
-find_package (CyrusSASL)
+#find_package (SWIG)
+#find_package (CyrusSASL)
 
-enable_testing ()
+#enable_testing ()
 
 # Set up runtime checks (valgrind, sanitizers etc.)
-include(tests/RuntimeCheck.cmake)  
+# include(tests/RuntimeCheck.cmake)  
 
 ## Variables used across components
 
@@ -272,7 +272,7 @@
 
 set (SYSINSTALL_BINDINGS OFF CACHE BOOL "If SYSINSTALL_BINDINGS is OFF then proton bindings will be installed underneath ${BINDINGS_DIR} and each user will need to modify their interpreter configuration to load the appropriate binding. If SYSINSTALL_BINDINGS is ON, then each language interpreter will be queried for the appropriate directory and proton bindings will be installed and available system wide with no additional per user configuration.")
 
-set (BINDING_LANGS PYTHON RUBY)
+#set (BINDING_LANGS PYTHON RUBY)
 
 foreach (LANG ${BINDING_LANGS})
   set (SYSINSTALL_${LANG} OFF CACHE BOOL "Install ${LANG} bindings into interpreter specified location.")
@@ -327,7 +327,7 @@
 endif()
 
 # Prerequisites for Go
-find_program(GO_EXE go)
+#find_program(GO_EXE go)
 mark_as_advanced(GO_EXE)
 if (GO_EXE)
   set (DEFAULT_GO ON)
diff -ur qpid-proton-0.26.0/cpp/CMakeLists.txt qpid-proton-patched/cpp/CMakeLists.txt
--- qpid-proton-0.26.0/cpp/CMakeLists.txt	2018-10-04 04:09:02.000000000 -0600
+++ qpid-proton-patched/cpp/CMakeLists.txt	2019-03-25 17:32:41.521213312 -0600
@@ -174,25 +174,25 @@
   set (CMAKE_DEBUG_POSTFIX "d")
 endif ()
 
-add_library(qpid-proton-cpp SHARED ${qpid-proton-cpp-source})
+#add_library(qpid-proton-cpp SHARED ${qpid-proton-cpp-source})
 if(BUILD_STATIC_LIBS)
   add_library(qpid-proton-cpp-static STATIC ${qpid-proton-cpp-source})
 endif(BUILD_STATIC_LIBS)
 
-target_link_libraries (qpid-proton-cpp LINK_PRIVATE ${PLATFORM_LIBS} qpid-proton-core qpid-proton-proactor ${CONNECT_CONFIG_LIBS})
+#target_link_libraries (qpid-proton-cpp LINK_PRIVATE ${PLATFORM_LIBS} qpid-proton-core qpid-proton-proactor ${CONNECT_CONFIG_LIBS})
 
-set_target_properties (
-  qpid-proton-cpp
-  PROPERTIES
-  LINKER_LANGUAGE CXX
-  VERSION   "${PN_LIB_CPP_VERSION}"
-  SOVERSION "${PN_LIB_CPP_MAJOR_VERSION}"
-  LINK_FLAGS "${CATCH_UNDEFINED} ${LTO}"
-  )
+#set_target_properties (
+#  qpid-proton-cpp
+#  PROPERTIES
+#  LINKER_LANGUAGE CXX
+#  VERSION   "${PN_LIB_CPP_VERSION}"
+#  SOVERSION "${PN_LIB_CPP_MAJOR_VERSION}"
+#  LINK_FLAGS "${CATCH_UNDEFINED} ${LTO}"
+#  )
 
 ## Install
 
-install(TARGETS qpid-proton-cpp
+install(TARGETS qpid-proton-cpp-static
   EXPORT  proton-cpp
   RUNTIME DESTINATION bin
   ARCHIVE DESTINATION ${LIB_INSTALL_DIR}
@@ -208,12 +208,12 @@
 
 install (DIRECTORY "include/proton" DESTINATION ${INCLUDE_INSTALL_DIR} FILES_MATCHING PATTERN "*.hpp")
 install (FILES "${CMAKE_CURRENT_BINARY_DIR}/config_presets.hpp" DESTINATION "${INCLUDE_INSTALL_DIR}/proton/internal")
-install (DIRECTORY "examples/"
-  DESTINATION "${PROTON_SHARE}/examples/cpp"
-  USE_SOURCE_PERMISSIONS
-  PATTERN "ProtonCppConfig.cmake" EXCLUDE)
+#install (DIRECTORY "examples/"
+#  DESTINATION "${PROTON_SHARE}/examples/cpp"
+#  USE_SOURCE_PERMISSIONS
+#  PATTERN "ProtonCppConfig.cmake" EXCLUDE)
 
-add_subdirectory(examples)
+#add_subdirectory(examples)
 add_subdirectory(docs)
 
 # Pkg config file
@@ -267,28 +267,28 @@
   set(test_env ${test_env} "PATH=$<TARGET_FILE_DIR:qpid-proton>")
 endif()
 
-macro(add_cpp_test test)
-  add_executable (${test} src/${test}.cpp)
-  target_link_libraries (${test} qpid-proton-cpp ${PLATFORM_LIBS})
-  add_test (NAME cpp-${test}
-    COMMAND ${PN_ENV_SCRIPT} -- ${test_env}  ${TEST_EXE_PREFIX_CMD} $<TARGET_FILE:${test}> ${ARGN})
-endmacro(add_cpp_test)
-
-add_cpp_test(codec_test)
-add_cpp_test(connection_driver_test)
-add_cpp_test(interop_test ${CMAKE_SOURCE_DIR}/tests)
-add_cpp_test(message_test)
-add_cpp_test(map_test)
-add_cpp_test(scalar_test)
-add_cpp_test(value_test)
-add_cpp_test(container_test)
-add_cpp_test(url_test)
-add_cpp_test(reconnect_test)
-add_cpp_test(link_test)
-if (ENABLE_JSONCPP)
-  add_cpp_test(connect_config_test)
-  target_link_libraries(connect_config_test qpid-proton-core) # For pn_sasl_enabled
-  set_tests_properties(cpp-connect_config_test PROPERTIES WORKING_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}")
-  # Test data and output directories for connect_config_test
-  file(COPY  "${CMAKE_CURRENT_SOURCE_DIR}/testdata" DESTINATION "${CMAKE_CURRENT_BINARY_DIR}")
-endif()
+#macro(add_cpp_test test)
+#  add_executable (${test} src/${test}.cpp)
+#  target_link_libraries (${test} qpid-proton-cpp ${PLATFORM_LIBS})
+#  add_test (NAME cpp-${test}
+#    COMMAND ${PN_ENV_SCRIPT} -- ${test_env}  ${TEST_EXE_PREFIX_CMD} $<TARGET_FILE:${test}> ${ARGN})
+#endmacro(add_cpp_test)
+#
+#add_cpp_test(codec_test)
+#add_cpp_test(connection_driver_test)
+#add_cpp_test(interop_test ${CMAKE_SOURCE_DIR}/tests)
+#add_cpp_test(message_test)
+#add_cpp_test(map_test)
+#add_cpp_test(scalar_test)
+#add_cpp_test(value_test)
+#add_cpp_test(container_test)
+#add_cpp_test(url_test)
+#add_cpp_test(reconnect_test)
+#add_cpp_test(link_test)
+#if (ENABLE_JSONCPP)
+#  add_cpp_test(connect_config_test)
+#  target_link_libraries(connect_config_test qpid-proton-core) # For pn_sasl_enabled
+#  set_tests_properties(cpp-connect_config_test PROPERTIES WORKING_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}")
+#  # Test data and output directories for connect_config_test
+#  file(COPY  "${CMAKE_CURRENT_SOURCE_DIR}/testdata" DESTINATION "${CMAKE_CURRENT_BINARY_DIR}")
+#endif()
diff -ur qpid-proton-0.26.0/cpp/include/proton/url.hpp qpid-proton-patched/cpp/include/proton/url.hpp
--- qpid-proton-0.26.0/cpp/include/proton/url.hpp	2018-10-04 04:09:02.000000000 -0600
+++ qpid-proton-patched/cpp/include/proton/url.hpp	2019-03-25 17:33:50.956058757 -0600
@@ -40,7 +40,6 @@
 /// An error encountered during URL parsing.
 
 struct
-PN_CPP_DEPRECATED("Use a third-party URL library")
 PN_CPP_CLASS_EXTERN url_error : public error {
     /// @cond INTERNAL
     /// Construct a URL error with a message.
@@ -62,7 +61,7 @@
 ///
 /// - Path is normally used as a link source or target address.  On a
 ///   broker it typically corresponds to a queue or topic name.
-class PN_CPP_DEPRECATED("Use a third-party URL library") url {
+class url {
   public:
     static const std::string AMQP;     ///< "amqp" prefix
     static const std::string AMQPS;    ///< "amqps" prefix
